---
title: "Tidyverse with Copilot for healthcare analytics -- part 2"
format: html
editor: visual
---

## 1. Introduction and recap

Healthcare analytics offers significant benefits to a wide range of stakeholders, including health administrators, organizations, and, most importantly, patients. In the first [part](https://rworks.dev/posts/healthcare-part1/) of this series, we introduced a complex dataset of diabetes patient encounters, comprising 100,000+ rows and over 50 columns. This dataset includes a rich array of variables, such as admission type and primary diagnosis. We demonstrated the process of cleaning, redefining, and preparing this data for analysis, highlighting the use of GitHub Copilot to navigate a particularly challenging variable.

In this second installment, we will dive deeper into the dataset to evaluate the effectiveness of healthcare delivery, starting with exploring medication prescriptions more closely, setting up the analytics around patient outcomes like hospital readmissions, which we will see in our next post. We will also examine the use of Copilot a little more, especially around avoiding tricky situations arising from insufficient context or guidance provided to Copilot (see here for [more](https://docs.posit.co/ide/user/ide/guide/tools/copilot.html)).

> *Look out for "**Notes on Copilot"** and "**Plot tips"** call-outs in this post!*

## 2. Some useful summaries

Before we begin analyzing patient outcomes like early readmission in more detail, let's get some useful summaries of key fields in our data set.

Let's read in the data again and clean it. This code [snippet](https://github.com/VidishaVac/healthcare-analytics/blob/main/cleanDiabetic_data.R) can also be found here, and the data can be downloaded [here](https://github.com/VidishaVac/healthcare-analytics/tree/main/dataset_diabetes). Once we do that, let's summarize a few key fields –

1.  `primary_diag` - primary diagnosis upon admission

2.  `a1c` – whether a patient was given the A1c test or not

3.  `diabetesMed` – whether a patient was given any diabetes medication

4.  `readmitted` – whether the patient was readmitted early (\<30 days)

5.  `acarbose:troglitazone` – individual 23 diabetes medications that were prescribed or not, and if prescribed, were held steady, increased or decreased

Since the 5th is a set of 23 fields, and is actually a crucial intermediate care delivery outcome, we will examine it in the next section, using the spectrum of visualization tools from `ggplot2()` to enable us to zoom into how these medications are used as care delivery.

```{r}
#| label: Chunk1
#| warning: false
#| code-fold: true
#| code-summary: "Show the code"

# --------------------------------------------- #
# Load necessary libraries
# --------------------------------------------- #
library(dplyr)
library(ggplot2)
library(tidyr)
library(kableExtra)
library(gridExtra)
library(grid)
library(lattice)

# --------------------------------------------- #
# Read in the data
# --------------------------------------------- #
D <- read.csv("diabetic_data.csv", sep=",")

# -------------------------------------------------------- #
# Clean and re-define HbA1c and primary diag
# -------------------------------------------------------- #

D <- D %>%
  mutate(a1c=ifelse(A1Cresult=="None", "not measured", "measured"), 
         primary_diag = case_when(
    diag_1 %in% c(390:459, 785) ~ "Circulatory",
    diag_1 %in% c(460:519, 786) ~ "Respiratory",
    diag_1 %in% c(520:579, 787) ~ "Digestive",
    diag_1 %in% c(580:629, 788) ~ "Genitourinary",
    diag_1 %in% c(630:679) ~ "Pregnancy",
    diag_1 %in% c(680:709, 782) ~ "Skin",
    diag_1 %in% c(710:739) ~ "Musculoskeletal",
    diag_1 %in% c(740:759) ~ "Congenital",
    diag_1 %in% c(800:999) ~ "Injury",
    grepl("^250", diag_1) ~ "Diabetes",
    is.na(diag_1) ~ "Missing",
    TRUE ~ "Other"
  ))

# Remove columns not used, patients with a discharge disposition of "expired" or "hospice"
D <- D %>% select(1,2,7:9,25:52) %>% 
  filter(!discharge_disposition_id %in% c('11','13','14','19','20','21'))

# Summarize
summary_a1c <- D %>%
  group_by(a1c) %>%
  summarise(count = n(), percent = n() / nrow(D) * 100) %>%
  arrange(desc(percent))
summary_primary_diag <- D %>% 
  group_by(primary_diag) %>%
  summarise(count = n(), percent = n() / nrow(D) * 100) %>%
  arrange(desc(percent))
summary_readmitted <- D %>% 
  group_by(readmitted) %>%
  summarise(count = n(), percent = n() / nrow(D) * 100) %>%
  arrange(desc(percent))
summary_change <- D %>% 
  group_by(change) %>%
  summarise(count = n(), percent = n() / nrow(D) * 100) %>%
  arrange(desc(percent))
summary_diabetesMed <- D %>% 
  group_by(diabetesMed) %>%
  summarise(count = n(), percent = n() / nrow(D) * 100) %>%
  arrange(desc(percent))

# See GitHub for more on kable outputs
summary_primary_diag %>% kable(digits = 1, format.args = list(big.mark = ","), caption = "Summary of primary diagnosis")
summary_a1c %>% kable(digits = 1, format.args = list(big.mark = ","), caption = "Summary of A1c test")
summary_diabetesMed %>% kable(digits = 1, format.args = list(big.mark = ","), caption = "Summary of diabetes medication")
summary_readmitted %>% kable(digits = 1, format.args = list(big.mark = ","), caption = "Summary of early readmission")
```

> ***Plot tips:** See [here](https://github.com/VidishaVac/healthcare-analytics/blob/main/R_snippets/polar.png) for a presentation-ready nice visual using a **polar bar chart**, showing us the primary diagnosis summary. Click [here](https://github.com/VidishaVac/healthcare-analytics/blob/main/R_snippets/polar.R) to learn how to make this image.*

Let's look at these in order of a patient's journey in the hospital. These are simple individual counts and percentages that give us a sense of what the data is saying – most patients (30%) are admitted with a circulatory diagnosis, only 17% patients have had their A1c measured, 77% of them are given *some* diabetes medication, which are changed about 50% of the time, and 53% patients are *not* readmitted after discharge.

> ***Notes on Copilot:** See the [here](https://github.com/VidishaVac/healthcare-analytics/issues/1) for a short clip on how this was implemented in Copilot. Note that I went back and modified the prompt since I forgot to ask it to include frequency percentages; I also went back and added `arrange()` myself in order to enable sorting for a neater look.* *The "kable" code did not use Copilot's help, see here for more on "kable".*

## 3. A closer look at all diabetes medications

Let’s now take a closer look at the 23 medication prescriptions, each defined by whether a particular medication was prescribed to the patient, including well-known drugs like insulin and metformin.

Each of these 23 fields is originally categorized into four groups or levels – $Down$, $Up$, $Steady$, $No$. We will visualize this data to assess variations across medications, first to explore how they're being prescribed, evaluating the use of Copilot in the plots we use, and then in relation to our two key covariates.

To facilitate this, we will first reshape the data using `gather`, allowing us to analyze all 23 medications simultaneously. We will then create a series of visualizations using `dplyr` and `ggplot2`, with assistance from Copilot for fine-tuning our visuals.

### 3.1. How are these medications being prescribed?

To visualize and understand how the 23 medications are prescribed, after re-shaping the data, we use 2 types of plots – `geom_col()` and `geom_tile()` to plot all 23 medications and their 4 levels each, leveraging the structure of the re-shaped data.

> ***Plot tips:** Click on "Show the code".*
>
> 1.  *This is a slightly different use of `geom_col()`. While it is normally used for as a barchart use case, in this plot, it has a quite useful "heatmap" look. By using `coord_flip()`, we are able to clearly see the full name of each medication; in my mind, this is a slightly better look than having the medication names be on the x-axis at a 45 degree. We enhanced this further by also using `geom_tile()`.*
> 2.  *Notice the very important difference in the `aes()` specifications between the 2 plots – for the left hand side `geom_col()`, the `fill` parameter is the `value` or the levels of the medication, while for the right hand side `geom_tile()`, its the actual percent. The legend to the right of each plot shows this.*
> 3.  *Finally, we have not yet tuned the color parameters, so the right hand side `geom_tile()` heatmap does not offer clear insights due to masking the variations, while the left hand side `geom_col()` is a bit better. We will implement color parameter tuning in the next section.*

```{r fig.width=12}
#| label: Chunk3
#| warning: false
#| code-fold: true
#| code-summary: "Show the code"

# Reshaping wide to get a better view of medications
meds <- D %>%
  select(metformin:metformin.pioglitazone) %>%
  gather(key = "medication", value = "value") %>%
  group_by(medication, value) %>% summarise(n=n()) %>% mutate(pct = (n / sum(n))*100)

p0 <- ggplot(data=meds, aes(x=medication, y=pct, fill=value)) + geom_col() + 
  labs(title = "Diabetes medications bar plot",
       x = "Medication name",
       y = "Percent prescribed", fill="Medication value") + theme_minimal() + coord_flip() +
  theme(plot.title = element_text(hjust = 0.5))

p1 <- ggplot(data=meds, aes(x=value, y=medication, fill=pct)) + geom_tile() + 
  labs(title = "Diabetes medication heatmap",
       x = "Medication value",
       y = "Medication name", fill="Percent prescribed") + theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5))

grid.arrange(p0, p1, ncol=2)
```

> ***Notes on Copilot:** While we did not use Copilot for these `ggplot2()` renditions, we did ask Copilot to help us with alternative visuals using the same data. See [here](https://github.com/VidishaVac/healthcare-analytics/blob/main/HealthTech/Copilot_guidance.md) to explore this more, especially avoiding pitfalls like **insufficient guidance** or a **too-short prompt***, *and keep in mind the `aes()` plot tip shown above.*

We see how most medications are rarely prescribed; in fact, the medications commonly known for diabetes are the ones most given – insulin and metformin. For the purpose of the next section, we will focus on the medications that are prescribed to at least 5% of patients.

```{r fig.width=5, fig.height=4}
#| label: Chunk4
#| warning: false
#| code-fold: true
#| code-summary: "Show the code"

# Medications prescribed to at least 5% of patients
meds_5pct <- meds %>% subset(value=="No" & 100-pct>=5) %>% mutate(pct_prsc=100-pct) %>% select(medication, pct_prsc) 

ggplot(data=meds_5pct, aes(x=reorder(medication, pct_prsc), y=pct_prsc)) + 
  geom_bar(stat="identity", color="black", fill="#56B4E9") + 
  labs(title = "Medications prescribed to at least 5% of patients",
       x = "Medication name",
       y="Percent prescribed") +
  geom_text(aes(label = paste0(round(pct_prsc, 2), "%")), 
            position = position_dodge(width = 1), vjust=-0.5, hjust=1, size=3.5) + coord_flip()
```

### 3.2. Medication usage by 2 key covariates

Now, let's investigate the impact made by the initial primary diagnosis of the patient and whether the A1c test was administered, on the vital diabetes medications given to the patient. To do this, we will use again `geom_tile()` to create heatmaps, this time, fine-tuning the color parameters to surface the underlying nuanced variations.

#### 3.2.1. Primary diagnoses

```{r}
#| label: Chunk5
#| warning: false
#| code-fold: true
#| code-summary: Show the code

# ------------------------------------------------------------ #
# Diver deeper into the medications
# 1) Plot against --
# i) primary diagnosis 
# ii) A1c
# 2) Use Copilot to finetune hyperparameters for more insights
# ------------------------------------------------------------ #

# i) primary diagnosis

# Re-define diagnoses to focus on a few key ones
D <- D %>% mutate(primary_diag = ifelse(primary_diag %in% c("Digestive", "Genitourinary", "Pregnancy", "Skin", "Musculoskeletal","Congenital","Injury","Other"), "Other", primary_diag))

# Reshape data again
meds_diag <- D %>%
  select(meds_5pct$medication, primary_diag) %>%
  gather(key = "medication", value = "value", -primary_diag) %>%
  group_by(primary_diag, medication, value) %>% summarise(n=n()) %>% mutate(pct = (n / sum(n))*100)

# Use geom_tile and scale_fill_gradient
ggplot(meds_diag, aes(x = value, y = medication, fill = pct)) +
  geom_tile() +
  theme_minimal() +
  facet_wrap(~ primary_diag, nrow = 2, ncol = 2) +
  scale_fill_gradient(low="red", high="green") +
  labs(title = "Medication by primary diagnosis",
       x = "Medication value",
       y = "Medication name", fill="Percent prescribed") +
  geom_text(aes(label = round(pct, 1)), color = "black", size = 3) +
  theme(plot.title = element_text(hjust = 0.5))

# Fine-tune color parameters for clearer visualization using Copilot
# Instead of Copilot's recommended colors, use a different color palette
ggplot(meds_diag, aes(x = value, y = medication, fill = pct)) +
  geom_tile() +
  facet_wrap(~ primary_diag, nrow = 2, ncol = 2) +
  scale_fill_gradientn(colors = palette.colors(9), 
                       limits = c(0, 100)) +
  labs(title = "Medication by primary diagnosis & tuned colors",
       x = "Medication value",
       y = "Medication name", fill="Percent prescribed") +
  theme_minimal() +
  geom_text(aes(label = paste(round(pct, 1), "%", sep="")), color = "white", size = 3) +
  theme(plot.title = element_text(hjust = 0.5))

```

#### 3.2.2. A1c test

```{r}
#| label: Chunk6
#| warning: false
#| code-fold: true
#| code-summary: "Show the code"

# ii) A1c

# Re-shape data
meds_a1c <- D %>%
  select(meds_5pct$medication, a1c) %>%
  gather(key = "medication", value = "value", -a1c) %>%
  group_by(a1c, medication, value) %>% summarise(n=n()) %>% mutate(pct = (n / sum(n))*100)

# Visualize with fine-tuned color parameters 
ggplot(meds_a1c, aes(x = value, y = medication, fill = pct)) +
  geom_tile() +
  facet_grid(~ a1c) +
  scale_fill_gradientn(colors = palette.colors(9), 
                       limits = c(0, 100)) +
  labs(title = "Medication by the A1c test & tuned colors",
       x = "Medication value",
       y = "Medication name", fill="Percent prescribed") +
  theme_minimal() +
  geom_text(aes(label = paste(round(pct, 1), "%", sep="")), color = "white", size = 3) +
  theme(plot.title = element_text(hjust = 0.5))
```

As we prepare to explore the impact of the A1c test and the primary diagnosis on patient outcomes like early readmission in the next part, our investigation of the 23 individual medications was revealing. While most medications show no significant difference in prescription rates based on primary diagnosis or A1c testing status, *specific medications do exhibit **notable variations**, as we see above*.

The value of the mosaic plot lies in its ability to provide rapid insights into these kind of care delivery patterns and how they vary based on critical factors that eventually affect patient outcomes.

> ***Notes on Copilot:** We asked Copilot to provide a color palette that is designed to be very robust under color vision deficiencies. Though it provided something appropriate, it still did not allow for a clear differentiation of medication usage by diagnosis or A1c. We ended up using `palette.colors`, which enables us to see the variations described above.*
>
> ## 4. What's next?

As part of a series of healthcare analytics with Copilot in R, in this second post, we went deeper into the dataset to assess healthcare delivery, focusing on medication prescriptions and laying the groundwork for analyzing patient outcomes like hospital readmissions in the next post. We also looked at using Copilot for our work, particularly in navigating challenges related to insufficient context or guidance.

In the third post, we will begin analyzing how hospital readmissions and other related patient care outcomes vary by care delivery and other vital hospital stay related factors.

> *In the meantime, be sure to check out all the links on the right for guidance on effective prompt writing for Copilot, along with additional visualizations of the complex data we’re exploring! Source GitHub [here](https://github.com/VidishaVac/healthcare-analytics).*
